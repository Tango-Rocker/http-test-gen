package middleware

//DO NOT EDIT THIS FILE MANUALLY UNLESS NECESSARY
//add your desired changes to templte.go run the tojen tool and then add your modifications
import (
	jen "github.com/dave/jennifer/jen"
	"strings"
)

type jenniferGenerator struct{}

func (j jenniferGenerator) Gen(tss []testCase, path string) error {
	return genFile(tss).Save(path)
}

func genFile(tss []testCase) *jen.File {
	ret := jen.NewFile("middleware")
	ret.Add(genDeclAt21())
	ret.Add(genDeclAt114())
	ret.Add(genFuncTest_HttpServer())
	ret.Add(genFuncsetupRoutes())
	ret.Add(genFuncgetHeaders())
	ret.Add(genFuncgetTestCases(tss))
	ret.Add(genFuncexecuteRequest())
	ret.Add(genFuncnewRequest())
	ret.Add(genFuncassert())
	return ret
}

func genDeclAt21() jen.Code {
	return jen.Null()
}
func genDeclAt114() jen.Code {
	return jen.Null().Type().Id("testCase").Struct(jen.Id("uri").Id("string"), jen.Id("method").Id("string"), jen.Id("body").Id("string"), jen.Id("headers").Qual("net/http", "Header"), jen.Id("expected").Id("string"), jen.Id("status").Id("int"))
}
func genFuncTest_HttpServer() jen.Code {
	return jen.Func().Id("Test_HttpServer").Params(jen.Id("t").Op("*").Qual("testing", "T")).Block(jen.Id("r").Op(":=").Id("setupRoutes").Call(), jen.Id("headers").Op(":=").Id("getHeaders").Call(), jen.Id("tss").Op(":=").Id("getTestCases").Call(jen.Id("headers")), jen.For(jen.List(jen.Id("_"), jen.Id("ts")).Op(":=").Range().Id("tss")).Block(jen.Id("t").Dot("Run").Call(jen.Id("ts").Dot("uri"), jen.Func().Params(jen.Id("t").Op("*").Qual("testing", "T")).Block(jen.Id("req").Op(":=").Id("newRequest").Call(jen.Id("ts").Dot("method"), jen.Id("ts").Dot("uri"), jen.Id("ts").Dot("body"), jen.Id("ts").Dot("headers")), jen.Id("res").Op(":=").Id("executeRequest").Call(jen.Id("r"), jen.Id("req")), jen.Id("assert").Call(jen.Id("t"), jen.Id("res"), jen.Id("ts"))))))
}
func genFuncsetupRoutes() jen.Code {
	return jen.Func().Id("setupRoutes").Params().Params(jen.Qual("net/http", "Handler")).Block(jen.Id("r").Op(":=").Id("chi").Dot("NewRouter").Call(), jen.Id("r").Dot("Get").Call(jen.Lit("/"), jen.Func().Params(jen.Id("w").Qual("net/http", "ResponseWriter"), jen.Id("r").Op("*").Qual("net/http", "Request")).Block(jen.Id("w").Dot("WriteHeader").Call(jen.Qual("net/http", "StatusOK")), jen.Id("w").Dot("Write").Call(jen.Index().Id("byte").Call(jen.Lit("Hello World"))))), jen.Return().Id("r"))
}
func genFuncgetHeaders() jen.Code {
	return jen.Func().Id("getHeaders").Params().Params(jen.Qual("net/http", "Header")).Block(jen.Id("headers").Op(":=").Id("make").Call(jen.Qual("net/http", "Header")), jen.Id("headers").Index(jen.Lit("Content-Type")).Op("=").Index().Id("string").Values(jen.Lit("application/json")), jen.Return().Id("headers"))
}

//this function is coded by hand to add the testCases registered during the testing session
func genFuncgetTestCases(tss []testCase) jen.Code {

	items := make([]jen.Code, 0)

	for _, ts := range tss {

		replacer := strings.NewReplacer("\t", "", "\n", "")
		ts.body = replacer.Replace(ts.body)
		ts.expected = replacer.Replace(ts.expected)

		val := jen.Values(
			jen.Id("uri").Op(":").Lit(ts.uri),
			jen.Id("method").Op(":").Lit(ts.method),
			jen.Id("body").Op(":").Lit(ts.body),
			jen.Id("headers").Op(":").Id("headers"),
			jen.Id("expected").Op(":").Lit(ts.expected),
			jen.Id("status").Op(":").Lit(ts.status))

		items = append(items, val)
	}

	jenCode := jen.Func().Id("getTestCases").Params(jen.Id("headers").Qual("net/http", "Header")).Params(jen.Index().Id("testCase")).
		Block(jen.Return().Index().Id("testCase").Values(items...))

	return jenCode
}

func genFuncexecuteRequest() jen.Code {
	return jen.Func().Id("executeRequest").Params(jen.Id("h").Qual("net/http", "Handler"), jen.Id("req").Op("*").Qual("net/http", "Request")).Params(jen.Op("*").Id("httptest").Dot("ResponseRecorder")).Block(jen.Id("rr").Op(":=").Id("httptest").Dot("NewRecorder").Call(), jen.Id("h").Dot("ServeHTTP").Call(jen.Id("rr"), jen.Id("req")), jen.Return().Id("rr"))
}

func genFuncnewRequest() jen.Code {
	return jen.Func().Id("newRequest").Params(jen.Id("method").Id("string"), jen.Id("uri").Id("string"), jen.Id("body").Id("string"), jen.Id("headers").Qual("net/http", "Header")).Params(jen.Op("*").Qual("net/http", "Request")).Block(jen.List(jen.Id("req"), jen.Id("_")).Op(":=").Qual("net/http", "NewRequest").Call(jen.Id("method"), jen.Id("uri"), jen.Qual("bytes", "NewBufferString").Call(jen.Id("body"))), jen.Id("req").Dot("Header").Op("=").Id("headers"), jen.Return().Id("req"))
}

func genFuncassert() jen.Code {
	return jen.Func().Id("assert").Params(jen.Id("t").Op("*").Qual("testing", "T"), jen.Id("res").Op("*").Id("httptest").Dot("ResponseRecorder"), jen.Id("ts").Id("testCase")).Block(jen.If(jen.Id("res").Dot("Code").Op("!=").Id("ts").Dot("status")).Block(jen.Id("t").Dot("Errorf").Call(jen.Lit("Status code is wrong. Have: %d, want: %d."), jen.Id("res").Dot("Code"), jen.Id("ts").Dot("status"))), jen.If(jen.Id("res").Dot("Body").Dot("String").Call().Op("!=").Id("ts").Dot("expected")).Block(jen.Id("t").Dot("Errorf").Call(jen.Lit("Response body is wrong. Have: %s, want: %s."), jen.Id("res").Dot("Body").Dot("String").Call(), jen.Id("ts").Dot("expected"))))
}
